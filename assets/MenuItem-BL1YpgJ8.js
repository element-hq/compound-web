import{j as t}from"./jsx-runtime-Cw0GR0a5.js";import{c as N}from"./index-CCQ3W5xA.js";import{r as l}from"./index-CTjT7uj6.js";import{T as w}from"./Text-DUPZfVce.js";import{C as M}from"./chevron-right-C-skg4d4.js";import{S as E}from"./index-oNbozaCL.js";const m=l.createContext(null);try{m.displayName="MenuContext",m.__docgenInfo={description:`A React context providing information about the menu in which a given
component resides.`,displayName:"MenuContext",props:{}}}catch{}const V="_item_8j2l6_17",T="_interactive_8j2l6_35",k="_icon_8j2l6_43",q="_label_8j2l6_52",R="_disabled_8j2l6_118",e={item:V,interactive:T,"no-label":"_no-label_8j2l6_39",icon:k,label:q,"nav-hint":"_nav-hint_8j2l6_59",disabled:R},p=({as:o,className:h,Icon:s,label:r,labelProps:b,onSelect:n,kind:f="primary",children:v,onClick:_,disabled:u,...y})=>{const a=o??"button",i=l.useContext(m),g=l.useCallback(I=>{if(_?.(I),n!==null&&i?.MenuItemWrapper==null){const c=new CustomEvent("menu.itemSelect",{bubbles:!0,cancelable:!0});n(c),c.defaultPrevented||i?.onOpenChange(!1)}},[i,n]),x=l.isValidElement(s),C=s,j=s,d=t.jsxs(a,{role:"menuitem",...y,className:N(h,e.item,{[e.interactive]:n!==null,[e["no-label"]]:r===null,[e.disabled]:u}),"data-kind":f,onClick:g,disabled:a==="button"?u:void 0,"aria-disabled":a==="button"?void 0:u,children:[x?t.jsx(E,{className:e.icon,children:C}):t.jsx(j,{width:24,height:24,className:e.icon,"aria-hidden":!0}),r!==null&&t.jsx(w,{className:e.label,size:"md",weight:"medium",as:"span",...b,children:r}),(a==="button"||a==="a")&&t.jsx(M,{width:8,height:24,className:e["nav-hint"],"aria-hidden":!0,viewBox:"8 0 8 24"}),v]});return i?.MenuItemWrapper==null||n===null?d:t.jsx(i.MenuItemWrapper,{onSelect:n,children:d})};try{p.displayName="MenuItem",p.__docgenInfo={description:"An item within a menu, acting either as a navigation button, or simply a\ncontainer for other interactive elements.\nMust be used within a compound Menu or other `menu` or `menubar` aria role subtree.",displayName:"MenuItem",props:{as:{defaultValue:{value:"button"},description:"The element type of this menu item.",name:"as",required:!1,type:{name:"enum",value:[{value:'"a"'},{value:'"button"'},{value:'"div"'}]}},className:{defaultValue:null,description:"The CSS class name.",name:"className",required:!1,type:{name:"string"}},Icon:{defaultValue:null,description:"The icon to show on this menu item.\nWhen `Icon` is a ReactNode, it should spread the props",name:"Icon",required:!0,type:{name:"ReactNode | ComponentType<SVGAttributes<SVGElement>>"}},label:{defaultValue:null,description:"The label to show on this menu item.",name:"label",required:!0,type:{name:"string | null"}},labelProps:{defaultValue:null,description:"Additional properties to pass to the Text label component.",name:"labelProps",required:!1,type:{name:'Omit<Omit<{ as?: ElementType<any, keyof IntrinsicElements>; type?: "body" | "heading"; weight?: "medium" | "bold" | "regular" | "semibold" | undefined; size?: "sm" | ... 4 more ... | undefined; className?: string | undefined; } & Omit<...> & { ...; }, "type"> & { ...; }, "ref"> | undefined'}},onSelect:{defaultValue:null,description:`Event callback for when the item is selected via mouse, touch, or keyboard.
Calling event.preventDefault in this handler will prevent the menu from
being dismissed.`,name:"onSelect",required:!0,type:{name:"((e: Event) => void) | null"}},kind:{defaultValue:{value:"primary"},description:"The color variant of the menu item.",name:"kind",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"critical"'}]}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}}}}}catch{}export{p as M,m as a};
