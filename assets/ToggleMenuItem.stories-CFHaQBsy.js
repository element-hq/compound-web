import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{r}from"./iframe-PWL6WNBy.js";import"./index-DF2Zw3H9.js";import{C as g,E as f}from"./extensions-ChcpH9sp.js";import{M as b}from"./MenuItem-6EhksP27.js";import{T as y}from"./Toggle-CFhj9s15.js";import"./preload-helper-PPVm8Dsz.js";import"./index-DzRMPct8.js";import"./Text-CLgl24yn.js";import"./Typography-BoL7xNP5.js";import"./chevron-right-a-L1cc6j.js";import"./index-CTtKhWoJ.js";import"./index-B1_61P_C.js";import"./index-BMBDXn91.js";import"./index-FccS7TVf.js";import"./index-BZRsxxC5.js";import"./index-DJASgtDo.js";import"./index-BHjvA8fe.js";const o=r.forwardRef(function({className:a,Icon:l,label:i,onSelect:s,checked:m,disabled:c,onClick:u},d){const p=r.useId(),h=r.useCallback(()=>{},[]);return e.jsx(b,{as:"div",role:"menuitemcheckbox","aria-checked":m,className:a,Icon:l,label:i,onSelect:s,disabled:c,onClick:u,children:e.jsx(y,{id:p,ref:d,"aria-hidden":!0,checked:m,disabled:c,onChange:h})})});try{o.displayName="ToggleMenuItem",o.__docgenInfo={description:"A menu item with a toggle control.\nMust be used within a compound Menu or other `menu` or `menubar` aria role subtree.",displayName:"ToggleMenuItem",props:{disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The label to show on this menu item.",name:"label",required:!0,type:{name:"string | null"}},Icon:{defaultValue:null,description:"The icon to show on this menu item.\nWhen `Icon` is a ReactElement, it should spread the props",name:"Icon",required:!1,type:{name:"ComponentType<SVGAttributes<SVGElement>> | ReactElement<unknown, string | JSXElementConstructor<any>>"}},className:{defaultValue:null,description:"The CSS class name.",name:"className",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:`Event callback for when the item is clicked.
@param e`,name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement>"}},onSelect:{defaultValue:null,description:`Event callback for when the item is selected via mouse, touch, or keyboard.
Calling event.preventDefault in this handler will prevent the menu from
being dismissed.`,name:"onSelect",required:!0,type:{name:"((e: Event) => void) | null"}},checked:{defaultValue:null,description:"Whether the toggle is checked.",name:"checked",required:!0,type:{name:"boolean"}}}}}catch{}const I=t=>{const[a,l]=r.useState(!1);return e.jsxs("div",{style:{width:300},children:[e.jsx(o,{...t,Icon:g,label:"First item",checked:a,onSelect:i=>{i.preventDefault(),l(s=>!s)}}),e.jsx(o,{...t,Icon:f,label:"Second item with a name that's quite long",checked:!0,disabled:!0,onSelect:()=>{}})]})},L={title:"Menu/ToggleMenuItem",component:I,tags:["autodocs","axe-exclude"],argTypes:{},args:{}},n={args:{}};n.parameters={...n.parameters,docs:{...n.parameters?.docs,source:{originalSource:`{
  args: {}
}`,...n.parameters?.docs?.source}}};const F=["Primary"];export{n as Primary,F as __namedExportsOrder,L as default};
