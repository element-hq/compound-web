{"version":3,"file":"UnstyledButton-60dcee3b.js","sources":["../../src/components/Button/UnstyledButton.tsx"],"sourcesContent":["/*\nCopyright 2023  New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React, { PropsWithChildren, forwardRef, ForwardedRef, Ref } from \"react\";\n\ninterface ButtonComponent {\n  // With the explicit `as` prop\n  <C extends React.ElementType>(\n    props: { as: C } & UnstyledButtonPropsFor<C>,\n  ): React.ReactElement;\n  // Without the explicit `as` prop, defaulting to a <button>\n  (props: UnstyledButtonPropsFor<\"button\">): React.ReactElement;\n}\n\ntype UnstyledButtonProps = PropsWithChildren<{\n  /**\n   * Note that disabled attribute is not added to buttons, so that disabled buttons are discoverable by keyboard.\n   * `aria-disabled` attribute is used to indicate button is disabled.\n   * Event handlers are not passed to disabled buttons (onClick, onSubmit).\n   */\n  disabled?: boolean;\n}>;\n\nexport type UnstyledButtonPropsFor<C extends React.ElementType> =\n  UnstyledButtonProps &\n    Omit<\n      React.ComponentPropsWithoutRef<C>,\n      keyof UnstyledButtonProps | \"as\"\n    > & {\n      ref?: React.Ref<React.ComponentRef<C>>;\n    };\n\n/**\n * Unstyled button component. Can be disabled and optionalally rendered as an anchor.\n * Intended to be wrapped with styles and exported as new button type - eg `IconButton` or `Button`.\n *\n * Not to be used externally.\n */\nexport const UnstyledButton = forwardRef(function UnstyledButton<\n  C extends React.ElementType = \"button\",\n>(\n  {\n    as,\n    children,\n    className,\n    disabled,\n    ...props\n  }: UnstyledButtonPropsFor<C> & { as?: C },\n  ref: ForwardedRef<C>,\n): React.ReactElement {\n  const Component = as || (\"button\" as const);\n\n  const { onClick, onSubmit, ...restProps } = props;\n  const eventHandlers = disabled\n    ? {}\n    : {\n        onClick,\n        onSubmit,\n      };\n\n  return (\n    <Component\n      {...restProps}\n      ref={ref as Ref<C>}\n      className={className}\n      // All elements roles should be overriden at the exceptions of anchors\n      // We want them to behave like links but look like buttons\n      role={as === \"a\" ? \"link\" : \"button\"}\n      tabIndex={0}\n      {...eventHandlers}\n      aria-disabled={disabled}\n    >\n      {children}\n    </Component>\n  );\n}) as ButtonComponent;\n"],"names":["UnstyledButton","forwardRef","as","children","className","disabled","props","ref","Component","onClick","onSubmit","restProps","eventHandlers","jsx"],"mappings":"sFAmDO,MAAAA,EAAAC,EAAAA,WAAA,SAAA,CAGL,GAAAC,EACE,SAAAC,EACA,UAAAC,EACA,SAAAC,EACA,GAAAC,CAEF,EAAAC,EAAA,CAGA,MAAAC,EAAAN,GAAA,SAEA,CAAA,QAAAO,EAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAL,EACAM,EAAAP,EAAA,GAAA,CAEI,QAAAI,EACE,SAAAC,CACA,EAGN,OAAAG,EAAA,IACEL,EAAC,CAAA,GAAAG,EACK,IAAAJ,EACJ,UAAAH,EACA,KAAAF,IAAA,IAAA,OAAA,SAG4B,SAAA,EAClB,GAAAU,EACN,gBAAAP,EACW,SAAAF,CAEd,CAAA,CAGP,CAAA"}