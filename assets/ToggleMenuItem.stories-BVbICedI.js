import{j as t}from"./jsx-runtime-DR9Q75dM.js";import{r}from"./index-DRjF_FHU.js";import{C as h,E as g}from"./extensions-DRIHxRsb.js";import{M as f}from"./MenuItem-YyrVQu2n.js";import{T as I}from"./Toggle-BRCP4wr-.js";import"./index-lhGYx47h.js";import"./Text-BvzksikX.js";import"./Typography-DzhKoIWt.js";import"./chevron-right-DND12YKW.js";import"./index-C8xBnYIG.js";import"./index-4or38LtJ.js";import"./index-CGa_gRws.js";import"./index-BXwbELbV.js";import"./index-Ksfxd92j.js";import"./index-BvEl7W6R.js";const n=r.forwardRef(function({className:a,Icon:s,label:i,onSelect:l,checked:c,disabled:m},d){const u=r.useId(),p=r.useCallback(()=>{},[]);return t.jsx(f,{as:"div",role:"menuitemcheckbox","aria-checked":c,className:a,Icon:s,label:i,onSelect:l,disabled:m,children:t.jsx(I,{id:u,ref:d,"aria-hidden":!0,checked:c,disabled:m,onChange:p})})});try{n.displayName="ToggleMenuItem",n.__docgenInfo={description:"A menu item with a toggle control.\nMust be used within a compound Menu or other `menu` or `menubar` aria role subtree.",displayName:"ToggleMenuItem",props:{className:{defaultValue:null,description:"The CSS class name.",name:"className",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The label to show on this menu item.",name:"label",required:!0,type:{name:"string | null"}},Icon:{defaultValue:null,description:"The icon to show on this menu item.\nWhen `Icon` is a ReactNode, it should spread the props",name:"Icon",required:!0,type:{name:"ReactNode | ComponentType<SVGAttributes<SVGElement>>"}},onSelect:{defaultValue:null,description:`Event callback for when the item is selected via mouse, touch, or keyboard.
Calling event.preventDefault in this handler will prevent the menu from
being dismissed.`,name:"onSelect",required:!0,type:{name:"((e: Event) => void) | null"}},checked:{defaultValue:null,description:"Whether the toggle is checked.",name:"checked",required:!0,type:{name:"boolean"}}}}}catch{}const F={title:"Menu/ToggleMenuItem",component:n,tags:["autodocs"],argTypes:{},args:{}},b=o=>{const[a,s]=r.useState(!1);return t.jsxs("div",{style:{width:300},children:[t.jsx(n,{...o,Icon:h,label:"First item",checked:a,onSelect:i=>{i.preventDefault(),s(l=>!l)}}),t.jsx(n,{...o,Icon:g,label:"Second item with a name that's quite long",checked:!0,disabled:!0})]})},e=b.bind({});e.args={};e.parameters={...e.parameters,docs:{...e.parameters?.docs,source:{originalSource:`args => {
  const [firstChecked, setFirstChecked] = useState(false);
  return <div style={{
    width: 300
  }}>
      <ToggleMenuItemComponent {...args} Icon={ChatIcon} label="First item" checked={firstChecked} onSelect={e => {
      e.preventDefault();
      setFirstChecked(c => !c);
    }} />
      <ToggleMenuItemComponent {...args} Icon={ExtensionsIcon} label="Second item with a name that's quite long" checked disabled />
    </div>;
}`,...e.parameters?.docs?.source}}};const R=["Primary"];export{e as Primary,R as __namedExportsOrder,F as default};
