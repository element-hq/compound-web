{"version":3,"file":"IconButton-b6311958.js","sources":["../../src/components/Button/IconButton/IconButton.tsx"],"sourcesContent":["/*\nCopyright 2023 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React, { PropsWithChildren, forwardRef } from \"react\";\nimport classnames from \"classnames\";\n\nimport styles from \"./IconButton.module.css\";\nimport { UnstyledButton } from \"../UnstyledButton\";\nimport { UnstyledButtonPropsFor } from \"../UnstyledButton\";\nimport { IndicatorIcon } from \"../../Icon/IndicatorIcon/IndicatorIcon\";\n\ntype IconButtonProps = UnstyledButtonPropsFor<\"button\"> &\n  JSX.IntrinsicElements[\"button\"] & {\n    /**\n     * The CSS class name.\n     */\n    className?: string;\n    /**\n     * The size of the button in CSS units, e.g. `\"24px\"`.\n     * Note that this is the size of the *button* itself: the icon will be 0.75 * this size\n     * @default 32px\n     */\n    size?: CSSStyleDeclaration[\"height\"];\n    /**\n     * The icon button indicator dot displayed on the top right\n     * As in IndicatorIcon\n     */\n    indicator?: \"default\" | \"success\" | \"critical\";\n\n    /**\n     * Whether the button is interactable\n     */\n    disabled?: boolean;\n  };\n\n/**\n * Display an icon as a button. Can render an indicator\n */\nexport const IconButton = forwardRef<\n  HTMLButtonElement,\n  PropsWithChildren<IconButtonProps>\n>(function IconButton(\n  { children, className, indicator, size = \"32px\", style, disabled, ...props },\n  ref,\n) {\n  const classes = classnames(styles[\"icon-button\"], className);\n  return (\n    <UnstyledButton\n      as=\"button\"\n      ref={ref}\n      className={classes}\n      style={\n        {\n          \"--cpd-icon-button-size\": size,\n          ...style,\n        } as React.CSSProperties\n      }\n      disabled={disabled}\n      {...props}\n      data-indicator={indicator}\n    >\n      <IndicatorIcon\n        indicator={indicator}\n        colour={disabled ? \"var(--cpd-color-icon-disabled)\" : undefined}\n      >\n        {React.Children.only(children)}\n      </IndicatorIcon>\n    </UnstyledButton>\n  );\n});\n"],"names":["IconButton","forwardRef","children","className","indicator","size","style","disabled","props","ref","classes","classnames","styles","jsx","UnstyledButton","IndicatorIcon","React"],"mappings":"sRAmDOA,EAAAC,EAAAA,WAAA,SAAA,CAAA,SAAAC,EAAA,UAAAC,EAAA,UAAAC,EAAA,KAAAC,EAAA,OAAA,MAAAC,EAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAC,EAAA,CAOL,MAAAC,EAAAC,EAAAC,EAAA,aAAA,EAAAT,CAAA,EACA,OAAAU,EAAA,IACEC,EAAC,CAAA,GAAA,SACI,IAAAL,EACH,UAAAC,EACW,MAAA,CAET,yBAAAL,EAC4B,GAAAC,CACvB,EACL,SAAAC,EAEF,GAAAC,EACI,iBAAAJ,EACY,SAAAS,EAAA,IAEhBE,EAAC,CAAA,UAAAX,EACC,OAAAG,EAAA,iCAAA,OACsD,SAAAS,EAAA,SAAA,KAAAd,CAAA,CAEzB,CAAA,CAC/B,CAAA,CAGN,CAAA;;;;"}