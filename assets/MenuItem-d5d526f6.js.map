{"version":3,"file":"MenuItem-d5d526f6.js","sources":["../../node_modules/@vector-im/compound-design-tokens/icons/chevron-right.svg","../../src/components/Menu/MenuContext.tsx","../../src/components/Menu/MenuItem.tsx"],"sourcesContent":["export default \"__VITE_ASSET__ea646552__\"","/*\nCopyright 2023 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ComponentType, ReactNode, createContext } from \"react\";\n\nexport interface MenuItemWrapperProps {\n  /**\n   * Event callback for when the item is selected via mouse, touch, or keyboard.\n   * Calling event.preventDefault in this handler will prevent the menu from\n   * being dismissed.\n   */\n  onSelect: (e: Event) => void;\n  children: ReactNode;\n}\n\nexport interface MenuData {\n  /**\n   * A component that wraps interactive menu items.\n   */\n  MenuItemWrapper: ComponentType<MenuItemWrapperProps> | null;\n  /**\n   * Event handler called when the open state of the menu changes.\n   */\n  onOpenChange: (open: boolean) => void;\n}\n\n/**\n * A React context providing information about the menu in which a given\n * component resides.\n */\nexport const MenuContext = createContext<MenuData | null>(null);\n","/*\nCopyright 2023 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport classnames from \"classnames\";\nimport React, {\n  ComponentPropsWithoutRef,\n  ComponentType,\n  ElementType,\n  isValidElement,\n  ReactNode,\n  SVGAttributes,\n  useCallback,\n  useContext,\n} from \"react\";\nimport styles from \"./MenuItem.module.css\";\nimport { Text } from \"../Typography/Text\";\nimport ChevronRightIcon from \"@vector-im/compound-design-tokens/icons/chevron-right.svg\";\nimport { MenuContext } from \"./MenuContext\";\nimport { Slot } from \"@radix-ui/react-slot\";\n\ntype MenuItemElement = \"button\" | \"label\" | \"a\" | \"div\";\n\ntype Props<C extends MenuItemElement> = {\n  /**\n   * The element type of this menu item.\n   * @default button\n   */\n  as?: C;\n  /**\n   * The CSS class name.\n   */\n  className?: string;\n  /**\n   * The icon to show on this menu item.\n   * When `Icon` is a ReactNode, it should spread the props\n   */\n  Icon: ComponentType<SVGAttributes<SVGElement>> | ReactNode;\n  /**\n   * The label to show on this menu item.\n   */\n  // This prop is required because it's rare to not want a label\n  label: string | null;\n  /**\n   * Event callback for when the item is selected via mouse, touch, or keyboard.\n   * Calling event.preventDefault in this handler will prevent the menu from\n   * being dismissed.\n   */\n  // This prop is required because it's rare to not want a selection handler\n  onSelect: ((e: Event) => void) | null;\n  /**\n   * The color variant of the menu item.\n   * @default primary\n   */\n  kind?: \"primary\" | \"critical\";\n  disabled?: boolean;\n} & Omit<ComponentPropsWithoutRef<C>, \"onSelect\">;\n\n/**\n * An item within a menu, acting either as a navigation button, or simply a\n * container for other interactive elements.\n */\nexport const MenuItem = <C extends MenuItemElement = \"button\">({\n  as,\n  className,\n  Icon,\n  label,\n  onSelect,\n  kind = \"primary\",\n  children,\n  onClick: onClickProp,\n  disabled,\n  ...props\n}: Props<C>): JSX.Element => {\n  const Component = as ?? (\"button\" as ElementType);\n  const context = useContext(MenuContext);\n\n  const onClick = useCallback(\n    (e: Parameters<Exclude<typeof onClickProp, undefined>>[0]) => {\n      (onClickProp as ((e_: typeof e) => void) | undefined)?.(e);\n      // If there is no wrapper component to automatically handle onSelect, we\n      // need to handle it manually, dismissing the menu as the default action\n      if (onSelect !== null && context?.MenuItemWrapper == null) {\n        const selectEvent = new CustomEvent(\"menu.itemSelect\", {\n          bubbles: true,\n          cancelable: true,\n        });\n        onSelect(selectEvent);\n        if (!selectEvent.defaultPrevented) context?.onOpenChange(false);\n      }\n    },\n    [context, onSelect],\n  );\n\n  const iconIsReactElement = isValidElement(Icon);\n  const componentIcon = Icon as ReactNode;\n  const SvgIcon = Icon as ComponentType<SVGAttributes<SVGElement>>;\n\n  const content = (\n    <Component\n      role=\"menuitem\"\n      {...props}\n      className={classnames(className, styles.item, {\n        [styles.interactive]: onSelect !== null,\n        [styles[\"no-label\"]]: label === null,\n        [styles[\"disabled\"]]: disabled,\n      })}\n      data-kind={kind}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {iconIsReactElement ? (\n        <Slot className={styles.icon}>{componentIcon}</Slot>\n      ) : (\n        <SvgIcon\n          width={24}\n          height={24}\n          className={styles.icon}\n          aria-hidden={true}\n        />\n      )}\n\n      {label !== null && (\n        <Text className={styles.label} size=\"md\" weight=\"medium\" as=\"span\">\n          {label}\n        </Text>\n      )}\n      {/* We use CSS to swap between this navigation hint and the provided\n      children on hover - see the styles module. */}\n      {(Component === \"button\" || Component === \"a\") && (\n        <ChevronRightIcon\n          width={24}\n          height={24}\n          className={styles[\"nav-hint\"]}\n          aria-hidden={true}\n        />\n      )}\n      {children}\n    </Component>\n  );\n\n  return context?.MenuItemWrapper == null || onSelect === null ? (\n    content\n  ) : (\n    <context.MenuItemWrapper onSelect={onSelect}>\n      {content}\n    </context.MenuItemWrapper>\n  );\n};\n"],"names":["SvgChevronRight","props","jsx","MenuContext","createContext","MenuItem","as","className","Icon","label","onSelect","kind","children","onClickProp","disabled","Component","context","useContext","onClick","useCallback","e","selectEvent","iconIsReactElement","isValidElement","componentIcon","SvgIcon","content","jsxs","classnames","styles","Slot","Text","ChevronRightIcon"],"mappings":"kbAEMA,EAAmBC,GAA0BC,MAAI,MAAO,CAAE,MAAO,MAAO,OAAQ,MAAO,QAAS,YAAa,KAAM,OAAQ,MAAO,6BAA8B,UAAW,WAAY,GAAGD,EAAO,SAA0BC,EAAG,IAAC,OAAQ,CAAE,EAAG,klBAAmlB,KAAM,cAAc,CAAE,CAAC,CAAE,ECyCv1BC,EAAAC,EAAA,cAAA,IAAA;+DC+BA,MAAAC,EAAA,CAAA,CAAwD,GAAAC,EAC7D,UAAAC,EACA,KAAAC,EACA,MAAAC,EACA,SAAAC,EACA,KAAAC,EAAA,UACO,SAAAC,EACP,QAAAC,EACS,SAAAC,EACT,GAAAb,CAEF,IAAA,CACE,MAAAc,EAAAT,GAAA,SACAU,EAAAC,aAAAd,CAAA,EAEAe,EAAAC,EAAA,YAAgBC,GAAA,CAKZ,GAHAP,GAAA,MAAAA,EAAAO,GAGAV,IAAA,OAAAM,GAAA,YAAAA,EAAA,kBAAA,KAAA,CACE,MAAAK,EAAA,IAAA,YAAA,kBAAA,CAAuD,QAAA,GAC5C,WAAA,EACG,CAAA,EAEdX,EAAAW,CAAA,EACAA,EAAA,kBAAmCL,GAAA,MAAAA,EAAA,aAAA,GAA2B,CAChE,EACF,CAAAA,EAAAN,CAAA,CACkB,EAGpBY,EAAAC,iBAAAf,CAAA,EACAgB,EAAAhB,EACAiB,EAAAjB,EAEAkB,EAAAC,EAAA,KACEZ,EAAC,CAAA,KAAA,WACM,GAAAd,EACD,UAAA2B,EAAArB,EAAAsB,EAAA,KAAA,CAC0C,CAAAA,EAAA,WAAA,EAAAnB,IAAA,KACT,CAAAmB,EAAA,UAAA,CAAA,EAAApB,IAAA,KACH,CAAAoB,EAAA,QAAA,EAAAf,CACV,CAAA,EACvB,YAAAH,EACU,QAAAO,EACX,SAAAJ,EACA,SAAA,CAECQ,EAAApB,EAAAA,IAAA4B,EAAA,CAAA,UAAAD,EAAA,KAAA,SAAAL,CAAA,CAAA,EAAAtB,EAAA,IAGCuB,EAAC,CAAA,MAAA,GACQ,OAAA,GACC,UAAAI,EAAA,KACU,cAAA,EACL,CAAA,EACfpB,IAAA,MAAAP,EAAA,IAAA6B,EAAA,CAAA,UAAAF,EAAA,MAAA,KAAA,KAAA,OAAA,SAAA,GAAA,OAAA,SAAApB,EAAA,GAMAM,IAAA,UAAAA,IAAA,MAAAb,EAAA,IAKA8B,EAAC,CAAA,MAAA,GACQ,OAAA,GACC,UAAAH,EAAA,UAAA,EACoB,cAAA,EACf,CAAA,EACfjB,CAED,CAAA,CAAA,EAIL,OAAAI,GAAA,YAAAA,EAAA,kBAAA,MAAAN,IAAA,KAAAgB,EAAAxB,EAAA,IAAAc,EAAA,gBAAA,CAAA,SAAAN,EAAA,SAAAgB,CAAA,CAAA,CAOF;;;","x_google_ignoreList":[0]}