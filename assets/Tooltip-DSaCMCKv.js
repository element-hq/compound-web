import{j as n}from"./jsx-runtime-CexXSJP5.js";import{r as l}from"./index-BP8_t0zE.js";import{i as k,u as y,b as O,c as G,o as U,j as Y,s as H,d as J,k as K,m as X,n as $,p as z,e as B,f as L,F as Q,h as Z,a as ee}from"./floating-ui.react-KXiqSXy2.js";import{c as C}from"./index-CSpfAsmC.js";const E=l.createContext(null);function x(){const e=l.useContext(E);if(e==null)throw new Error("Tooltip components must be wrapped in <Tooltip />");return e}const te="_tooltip_1pslb_17",oe="_invisible_1pslb_30",ne="_caption_1pslb_37",ae="_arrow_1pslb_42",b={tooltip:te,invisible:oe,caption:ne,arrow:ae},R={open:300,close:0},w=({children:e})=>n.jsx(k,{delay:R,timeoutMs:300,children:e});w.displayName="TooltipProvider";try{w.displayName="TooltipProvider",w.__docgenInfo={description:`Enables tooltips to share a global "warm-up" period for their hover delay.
You must wrap your application in this component for tooltips to function.`,displayName:"TooltipProvider",props:{}}}catch{}function ie({open:e,disabled:a=!1,onOpenChange:i,placement:t="bottom",isTriggerInteractive:r,caption:o,...c}){const s=y(),u=y(),f=y(),p=l.useRef(null),[P,V]=l.useState(!1),h=a?!1:e??P,g=(I,M,S)=>{i?.(I,M,S),e===void 0&&V(I)},v=O({placement:t,open:h,onOpenChange:g,whileElementsMounted:G,middleware:[U(6),Y({crossAxis:t.includes("-"),fallbackAxisSideDirection:"start",padding:5}),H({padding:5}),J({element:p})]}),d=v.context,{delay:q,initialDelay:F}=K(d);if(F!==R)throw new Error("Tooltips must be wrapped in a global <TooltipProvider>");const N=X(d,{move:!1,enabled:e===void 0,delay:r?q:{}}),W=$(d,{enabled:e===void 0,visibleOnly:!1}),A=z(d),m="label"in c?"label":"description",T=B(d,{enabled:m==="description",role:"tooltip"}),D=l.useMemo(()=>m==="label"?{reference:{"aria-labelledby":s},floating:{id:s}}:{},[m,s]),_=L([N,W,A,T,D]);return l.useMemo(()=>({contentId:s,labelId:u,captionId:o?f:void 0,caption:o,purpose:m,open:h,setOpen:g,..._,...v,arrowRef:p}),[u,f,o,T,h,g,_,v,p])}function j({children:e,isTriggerInteractive:a=!0,nonInteractiveTriggerTabIndex:i=0,...t}){const r=ie({isTriggerInteractive:a,...t});return n.jsxs(E.Provider,{value:r,children:[n.jsx(se,{isTriggerInteractive:a,nonInteractiveTriggerTabIndex:i,children:e}),n.jsxs(re,{children:[n.jsx("span",{id:r.labelId,children:"label"in t?t.label:t.description}),n.jsx(le,{})]})]})}function le(){const{caption:e,captionId:a}=x();if(!e)return null;const t=typeof e=="string"?"span":"div";return n.jsx(t,{id:a,className:C(b.caption,"cpd-theme-dark"),children:e})}function re({children:e}){const{context:a,open:i,arrowRef:t,purpose:r,...o}=x();return!i&&r!=="label"?null:n.jsx(Q,{children:n.jsxs("div",{ref:o.refs.setFloating,"aria-labelledby":o.labelId,"aria-describedby":o.captionId||o.labelId,style:o.floatingStyles,...o.getFloatingProps(),className:C(b.tooltip,{[b.invisible]:r==="label"&&!i}),children:[n.jsx(Z,{ref:t,context:a,width:10,height:6,className:b.arrow}),e]})})}const se=({children:e,isTriggerInteractive:a,nonInteractiveTriggerTabIndex:i})=>{const t=x(),r=e?.ref,o=ee([t.refs.setReference,r]),c=l.useMemo(()=>{if(l.isValidElement(e))if(a){const s=t.getReferenceProps({ref:o,...e.props});return l.cloneElement(e,s)}else{const s=t.getReferenceProps({ref:o,tabIndex:i}),{"aria-labelledby":u,"aria-describedby":f,...p}=s;return n.jsx("span",{tabIndex:i,...p,children:l.cloneElement(e,{"aria-labelledby":u,"aria-describedby":f})})}},[t,o,e]);if(!c)throw new Error("Tooltip anchor must be a single valid React element");return c};try{j.displayName="Tooltip",j.__docgenInfo={description:"A tooltip component",displayName:"Tooltip",props:{disabled:{defaultValue:null,description:"Whether the tooltip should be forced to be in a closed state.",name:"disabled",required:!1,type:{name:"boolean"}},caption:{defaultValue:null,description:`The caption of the tooltip.
JSX.Element can be used to provide accessibility content like kbd element.
Keep in mind, the caption should not be used for interactive content.`,name:"caption",required:!1,type:{name:"string | Element"}},open:{defaultValue:{value:"undefined"},description:`The controlled open state of the tooltip.
If provided, the tooltip will be in controlled mode.
When true, the tooltip is always open. When false, the tooltip is always hidden.
When undefined, the tooltip will manage its own open state.
You will mostly want to omit this property. Will be used the vast majority
of the time during development.`,name:"open",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"The event handler for the open change.",name:"onOpenChange",required:!1,type:{name:"((open: boolean, event?: Event, reason?: OpenChangeReason) => void) | undefined"}},placement:{defaultValue:{value:'"bottom"'},description:"The placement of the tooltip.",name:"placement",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'},{value:'"bottom"'},{value:'"top"'},{value:'"left-end"'},{value:'"left-start"'},{value:'"right-end"'},{value:'"right-start"'},{value:'"bottom-end"'},{value:'"bottom-start"'},{value:'"top-end"'},{value:'"top-start"'}]}},label:{defaultValue:null,description:"A label for the target element.",name:"label",required:!0,type:{name:"string"}},isTriggerInteractive:{defaultValue:{value:"true"},description:`Whether the trigger element is interactive.
When trigger is interactive:
     - tooltip will be shown after a 300ms delay.
When trigger is not interactive:
     - tooltip will be shown instantly when pointer enters trigger.
     - trigger will be wrapped in a span with a tab index from prop nonInteractiveTriggerTabIndex`,name:"isTriggerInteractive",required:!1,type:{name:"boolean"}},nonInteractiveTriggerTabIndex:{defaultValue:{value:"0"},description:"The tab index for the non interactive trigger.",name:"nonInteractiveTriggerTabIndex",required:!1,type:{name:"number"}},description:{defaultValue:null,description:"A description for the target element.",name:"description",required:!0,type:{name:"string"}}}}}catch{}export{w as T,j as a};
