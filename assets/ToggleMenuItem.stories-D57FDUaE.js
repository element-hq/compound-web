import{j as e}from"./jsx-runtime-DR9Q75dM.js";import{r}from"./index-DRjF_FHU.js";import{C as h,E as g}from"./extensions-DRIHxRsb.js";import{M as f}from"./MenuItem-DKEpwxgf.js";import{T as b}from"./Toggle-B06isGdb.js";import"./index-lhGYx47h.js";import"./Text-Ca3mYoxg.js";import"./Typography-f-oayws_.js";import"./chevron-right-DND12YKW.js";import"./index-C8xBnYIG.js";import"./index-2SmsnS5l.js";import"./index-CGa_gRws.js";import"./index-DlsBsfvk.js";import"./index-Ksfxd92j.js";import"./index-BvEl7W6R.js";const o=r.forwardRef(function({className:a,Icon:s,label:i,onSelect:l,checked:m,disabled:c},u){const d=r.useId(),p=r.useCallback(()=>{},[]);return e.jsx(f,{as:"div",role:"menuitemcheckbox","aria-checked":m,className:a,Icon:s,label:i,onSelect:l,disabled:c,children:e.jsx(b,{id:d,ref:u,"aria-hidden":!0,checked:m,disabled:c,onChange:p})})});try{o.displayName="ToggleMenuItem",o.__docgenInfo={description:"A menu item with a toggle control.\nMust be used within a compound Menu or other `menu` or `menubar` aria role subtree.",displayName:"ToggleMenuItem",props:{disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"The CSS class name.",name:"className",required:!1,type:{name:"string"}},onSelect:{defaultValue:null,description:`Event callback for when the item is selected via mouse, touch, or keyboard.
Calling event.preventDefault in this handler will prevent the menu from
being dismissed.`,name:"onSelect",required:!0,type:{name:"((e: Event) => void) | null"}},label:{defaultValue:null,description:"The label to show on this menu item.",name:"label",required:!0,type:{name:"string | null"}},Icon:{defaultValue:null,description:"The icon to show on this menu item.\nWhen `Icon` is a ReactElement, it should spread the props",name:"Icon",required:!0,type:{name:"ReactElement<any, string | JSXElementConstructor<any>> | ComponentType<SVGAttributes<SVGElement>>"}},checked:{defaultValue:null,description:"Whether the toggle is checked.",name:"checked",required:!0,type:{name:"boolean"}}}}}catch{}const y=t=>{const[a,s]=r.useState(!1);return e.jsxs("div",{style:{width:300},children:[e.jsx(o,{...t,Icon:h,label:"First item",checked:a,onSelect:i=>{i.preventDefault(),s(l=>!l)}}),e.jsx(o,{...t,Icon:g,label:"Second item with a name that's quite long",checked:!0,disabled:!0,onSelect:()=>{}})]})},R={title:"Menu/ToggleMenuItem",component:y,tags:["autodocs"],argTypes:{},args:{}},n={args:{}};n.parameters={...n.parameters,docs:{...n.parameters?.docs,source:{originalSource:`{
  args: {}
}`,...n.parameters?.docs?.source}}};const A=["Primary"];export{n as Primary,A as __namedExportsOrder,R as default};
