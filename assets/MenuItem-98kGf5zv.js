import{j as t}from"./jsx-runtime-DoxjgJx5.js";import{c as N}from"./index-C2KoGaFq.js";import{r as i}from"./index-Cu9bd8lq.js";import{T as I}from"./Text-DCibjNNg.js";import{C as M}from"./chevron-right-DRUMXvCI.js";import{S as V}from"./index-B2VpcjXg.js";const u=i.createContext(null);try{u.displayName="MenuContext",u.__docgenInfo={description:`A React context providing information about the menu in which a given
component resides.`,displayName:"MenuContext",props:{}}}catch{}const E="_item_1gwvj_17",T="_interactive_1gwvj_36",k="_icon_1gwvj_44",q="_label_1gwvj_53",R="_disabled_1gwvj_119",e={item:E,interactive:T,"no-label":"_no-label_1gwvj_40",icon:k,label:q,"nav-hint":"_nav-hint_1gwvj_60",disabled:R},p=({as:l,className:h,Icon:o,label:s,labelProps:v,onSelect:n,kind:b="primary",children:f,onClick:_,disabled:m,...g})=>{const r=l??"button",a=i.useContext(u),y=i.useCallback(j=>{if(_?.(j),n!==null&&a?.MenuItemWrapper==null){const d=new CustomEvent("menu.itemSelect",{bubbles:!0,cancelable:!0});n(d),d.defaultPrevented||a?.onOpenChange(!1)}},[a,n]),x=i.isValidElement(o),w=o,C=o,c=t.jsxs(r,{role:"menuitem",...g,className:N(h,e.item,{[e.interactive]:n!==null,[e["no-label"]]:s===null,[e.disabled]:m}),"data-kind":b,onClick:y,disabled:m,children:[x?t.jsx(V,{className:e.icon,children:w}):t.jsx(C,{width:24,height:24,className:e.icon,"aria-hidden":!0}),s!==null&&t.jsx(I,{className:e.label,size:"md",weight:"medium",as:"span",...v,children:s}),(r==="button"||r==="a")&&t.jsx(M,{width:8,height:24,className:e["nav-hint"],"aria-hidden":!0,viewBox:"8 0 8 24"}),f]});return a?.MenuItemWrapper==null||n===null?c:t.jsx(a.MenuItemWrapper,{onSelect:n,children:c})};try{p.displayName="MenuItem",p.__docgenInfo={description:"An item within a menu, acting either as a navigation button, or simply a\ncontainer for other interactive elements.\nMust be used within a compound Menu or other `menu` or `menubar` aria role subtree.",displayName:"MenuItem",props:{as:{defaultValue:{value:"button"},description:"The element type of this menu item.",name:"as",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"a"'},{value:'"div"'},{value:'"label"'}]}},className:{defaultValue:null,description:"The CSS class name.",name:"className",required:!1,type:{name:"string"}},Icon:{defaultValue:null,description:"The icon to show on this menu item.\nWhen `Icon` is a ReactNode, it should spread the props",name:"Icon",required:!0,type:{name:"ReactNode | ComponentType<SVGAttributes<SVGElement>>"}},label:{defaultValue:null,description:"The label to show on this menu item.",name:"label",required:!0,type:{name:"string | null"}},labelProps:{defaultValue:null,description:"Additional properties to pass to the Text label component.",name:"labelProps",required:!1,type:{name:'Omit<Omit<{ as?: ElementType<any>; type?: "heading" | "body"; weight?: "medium" | "bold" | "regular" | "semibold" | undefined; size?: "sm" | "lg" | "xs" | "md" | "xl" | undefined; className?: string | undefined; } & Omit<...> & { ...; }, "type"> & { ...; }, "ref"> | undefined'}},onSelect:{defaultValue:null,description:`Event callback for when the item is selected via mouse, touch, or keyboard.
Calling event.preventDefault in this handler will prevent the menu from
being dismissed.`,name:"onSelect",required:!0,type:{name:"((e: Event) => void) | null"}},kind:{defaultValue:{value:"primary"},description:"The color variant of the menu item.",name:"kind",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"critical"'}]}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}}}}}catch{}export{p as M,u as a};
