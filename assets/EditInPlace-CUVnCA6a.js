import{j as t}from"./jsx-runtime-DoxjgJx5.js";import{c as a}from"./index-C2KoGaFq.js";import{r as n,a as _}from"./index-Cu9bd8lq.js";import{T as B}from"./Text-BTQEANK3.js";import{u as c}from"./useId-D5m2XpUu.js";import{S as h}from"./check-CXsFGzWm.js";import{S as I}from"./close-D55JIkKE.js";import{S as L}from"./error-YokBWoNX.js";const R="_container_cgk4x_17",P="_label_cgk4x_21",D="_controls_cgk4x_27",F="_button_cgk4x_32",A="_control_cgk4x_27",e={container:R,label:P,controls:D,"button-group":"_button-group_cgk4x_32",button:F,"primary-button":"_primary-button_cgk4x_51","primary-button-disabled":"_primary-button-disabled_cgk4x_60",control:A,"container-error":"_container-error_cgk4x_83","caption-line":"_caption-line_cgk4x_91","caption-icon":"_caption-icon_cgk4x_95","caption-icon-error":"_caption-icon-error_cgk4x_103","caption-icon-saved":"_caption-icon-saved_cgk4x_107","caption-text":"_caption-text_cgk4x_118","caption-text-error":"_caption-text-error_cgk4x_123","caption-text-saved":"_caption-text-saved_cgk4x_127"},g=n.forwardRef(function({className:y,label:k,onSave:u,onCancel:d,saveButtonLabel:j,cancelButtonLabel:S,disableSaveButton:p,error:o,savedLabel:m,...N},w){const s=c(),b=c(),f=c(),T=a(e.container,y,{[e["container-error"]]:!!o}),[q,l]=_.useState(!1),r=n.useRef(null),x=n.useRef(null),i=n.useRef(null);_.useEffect(()=>()=>{r.current&&clearTimeout(r.current)},[]);const C=n.useCallback(async V=>{V.preventDefault();try{await u(),x.current?.blur(),l(!0),r.current=setTimeout(()=>{l(!1)},2e3)}catch{}},[l,u,r]),E=n.useCallback(()=>{i.current?.blur(),d()},[i,d]);return t.jsxs("form",{className:T,id:s,onSubmit:C,children:[t.jsx("div",{className:e.label,id:b,children:k}),t.jsxs("div",{className:e.controls,children:[t.jsx(B,{ref:w,...N,className:e.control,"aria-labelledby":b,"aria-invalid":!!o,"aria-errormessage":o?f:void 0}),t.jsxs("div",{className:e["button-group"],children:[t.jsx("button",{type:"submit",className:a(e.button,e["primary-button"],{[e["primary-button-disabled"]]:p}),ref:x,"aria-controls":s,"aria-label":j,disabled:p,children:t.jsx(h,{})}),t.jsx("button",{type:"button",role:"button",ref:i,className:e.button,onClick:E,"aria-controls":s,"aria-label":S,children:t.jsx(I,{})})]})]}),o&&t.jsxs("div",{className:e["caption-line"],children:[t.jsx(L,{className:a(e["caption-icon"],e["caption-icon-error"])}),t.jsx("span",{id:f,className:a(e["caption-text"],e["caption-text-error"]),children:o})]}),m&&q&&t.jsxs("div",{className:e["caption-line"],children:[t.jsx("div",{className:a(e["caption-icon"],e["caption-icon-saved"]),children:t.jsx(h,{})}),t.jsx("span",{className:a(e["caption-text"],e["caption-text-saved"]),children:m})]})]})});try{g.displayName="EditInPlace",g.__docgenInfo={description:`A text box with save/cancel buttons that appear when the field is active.
Since thios control has its own 'save' button, it should *not* appear as part
of a larger form: it exists as its own form that submits separately.`,displayName:"EditInPlace",props:{label:{defaultValue:null,description:"The label for the control",name:"label",required:!0,type:{name:"string"}},className:{defaultValue:null,description:"The CSS class name.",name:"className",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The content of the text box",name:"value",required:!1,type:{name:"string | (string & readonly string[])"}},enableLigatures:{defaultValue:null,description:`Enable contextual alternate ligatures on input text
For example on an in-place editing field
https://github.com/rsms/inter/issues/222
https://github.com/rsms/inter/blob/master/src/features/calt.fea`,name:"enableLigatures",required:!1,type:{name:"boolean"}},onSave:{defaultValue:null,description:"Callback for when the user confirms the change",name:"onSave",required:!0,type:{name:"() => Promise<void>"}},onCancel:{defaultValue:null,description:"Calback for when the user wishes to cancel the change",name:"onCancel",required:!0,type:{name:"() => void"}},saveButtonLabel:{defaultValue:null,description:"The label for the save button",name:"saveButtonLabel",required:!0,type:{name:"string"}},cancelButtonLabel:{defaultValue:null,description:"The label for the cancel button",name:"cancelButtonLabel",required:!1,type:{name:"string"}},disableSaveButton:{defaultValue:null,description:`True to disable the save button, false to enasble.
Default: false (enabled)`,name:"disableSaveButton",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:`Error message to be displayed below the box. If supplied, will disable the
save button.`,name:"error",required:!1,type:{name:"string"}},savedLabel:{defaultValue:null,description:`Label to be displayed by the green check at the bottom. Will only be displayed
for 2 seconds after the onSave callback promise resolves successfully.`,name:"savedLabel",required:!1,type:{name:"string"}}}}}catch{}export{g as E};
