import{j as t}from"./jsx-runtime-DoxjgJx5.js";import{S as u}from"./extensions-Crvwpr_j.js";import{S as d}from"./chat-Ce9sY079.js";import{r as p}from"./index-Cu9bd8lq.js";import{M as g}from"./MenuItem-D2IOP9Gc.js";import{T as h}from"./Toggle-CfFDn7Ov.js";import{u as I}from"./useId-D5m2XpUu.js";import"./index-C2KoGaFq.js";import"./Text-BrcN_buA.js";import"./Typography-BcgMUEGb.js";import"./index-icJLasaE.js";import"./index-8DUk24eR.js";import"./index-tFWdirwu.js";import"./index-CZs6vfAl.js";import"./index-MTP5U5xA.js";const o=p.forwardRef(function({className:i,Icon:s,label:l,onSelect:m,...r},c){const a=I();return t.jsx(g,{as:"div",role:"menuitemcheckbox",className:i,Icon:s,label:l,labelProps:{as:"label",htmlFor:a},onSelect:m,"aria-checked":r.checked,children:t.jsx(h,{id:a,ref:c,...r})})});try{o.displayName="ToggleMenuItem",o.__docgenInfo={description:"A menu item with a toggle control. Clicking anywhere on the surface will\nactivate the toggle.\nMust be used within a compound Menu or other `menu` or `menubar` aria role subtree.",displayName:"ToggleMenuItem",props:{className:{defaultValue:null,description:"The CSS class name.",name:"className",required:!1,type:{name:"string"}},onSelect:{defaultValue:null,description:`Event callback for when the item is selected via mouse, touch, or keyboard.
Calling event.preventDefault in this handler will prevent the menu from
being dismissed.`,name:"onSelect",required:!0,type:{name:"((e: Event) => void) | null"}},label:{defaultValue:null,description:"The label to show on this menu item.",name:"label",required:!0,type:{name:"string | null"}},Icon:{defaultValue:null,description:"The icon to show on this menu item.\nWhen `Icon` is a ReactNode, it should spread the props",name:"Icon",required:!0,type:{name:"ReactNode | ComponentType<SVGAttributes<SVGElement>>"}}}}}catch{}const V={title:"Menu/ToggleMenuItem",component:o,tags:["autodocs"],argTypes:{},args:{}},f=n=>t.jsxs("div",{style:{width:300},children:[t.jsx(o,{...n,Icon:d,label:"First item"}),t.jsx(o,{...n,Icon:u,label:"Second item with a name that's quite long"})]}),e=f.bind({});e.args={};e.parameters={...e.parameters,docs:{...e.parameters?.docs,source:{originalSource:`args => <div style={{
  width: 300
}}>
    <ToggleMenuItemComponent {...args} Icon={ChatIcon} label="First item" />
    <ToggleMenuItemComponent {...args} Icon={ExtensionsIcon} label="Second item with a name that's quite long" />
  </div>`,...e.parameters?.docs?.source}}};const R=["Primary"];export{e as Primary,R as __namedExportsOrder,V as default};
