import{j as n}from"./jsx-runtime-DR9Q75dM.js";import{r as p}from"./index-DRjF_FHU.js";import{c as V}from"./index-lhGYx47h.js";import{c as $}from"./index-DlsBsfvk.js";import{P as y}from"./index-Ksfxd92j.js";const d={"progress-bar":"_progress-bar_1veej_17","progress-bar-container":"_progress-bar-container_1veej_33","progress-bar-label":"_progress-bar-label_1veej_62","progress-bar-indicator":"_progress-bar-indicator_1veej_68"};var g="Progress",b=100,[E,X]=$(g),[R,T]=E(g),N=p.forwardRef((e,r)=>{const{__scopeProgress:i,value:s=null,max:a,getValueLabel:c=D,...u}=e;(a||a===0)&&!h(a)&&console.error(S(`${a}`,"Progress"));const t=h(a)?a:b;s!==null&&!_(s,t)&&console.error(q(`${s}`,"Progress"));const o=_(s,t)?s:null,l=m(o)?c(o,t):void 0;return n.jsx(R,{scope:i,value:o,max:t,children:n.jsx(y.div,{"aria-valuemax":t,"aria-valuemin":0,"aria-valuenow":m(o)?o:void 0,"aria-valuetext":l,role:"progressbar","data-state":w(o,t),"data-value":o??void 0,"data-max":t,...u,ref:r})})});N.displayName=g;var I="ProgressIndicator",j=p.forwardRef((e,r)=>{const{__scopeProgress:i,...s}=e,a=T(I,i);return n.jsx(y.div,{"data-state":w(a.value,a.max),"data-value":a.value??void 0,"data-max":a.max,...s,ref:r})});j.displayName=I;function D(e,r){return`${Math.round(e/r*100)}%`}function w(e,r){return e==null?"indeterminate":e===r?"complete":"loading"}function m(e){return typeof e=="number"}function h(e){return m(e)&&!isNaN(e)&&e>0}function _(e,r){return m(e)&&!isNaN(e)&&e<=r&&e>=0}function S(e,r){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${r}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${b}\`.`}function q(e,r){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${r}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${b} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var A=N,M=j;const P=p.forwardRef(function({size:r,tint:i,className:s,value:a,max:c,getValueLabel:u,...t},o){const l=c??1,v=a??l,x=p.useId(),f=u?u(v,l):null;return n.jsxs("div",{className:V(d["progress-bar-container"],s),"data-tint":i,...t,children:[f&&n.jsx("div",{id:x,className:d["progress-bar-label"],children:f}),n.jsx(A,{className:d["progress-bar"],"data-size":r,max:l,value:v,ref:o,"aria-labelledby":f?x:void 0,getValueLabel:u,children:n.jsx(M,{className:d["progress-bar-indicator"],style:{transform:`translateX(-${100-v/l*100}%)`}})})]})});try{P.displayName="Progress",P.__docgenInfo={description:"Displays an indicator showing the completion progress of a task, optionally with a label",displayName:"Progress",props:{size:{defaultValue:null,description:"The size variant of the progress bar",name:"size",required:!0,type:{name:"enum",value:[{value:'"sm"'},{value:'"lg"'}]}},className:{defaultValue:null,description:"The CSS class name forwarded to the root element",name:"className",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the progress bar. Defaults to max if not provided",name:"value",required:!1,type:{name:"number | null"}},max:{defaultValue:null,description:"The maximum value of the progress bar. Defaults to 1 if not provided",name:"max",required:!1,type:{name:"number"}},tint:{defaultValue:null,description:`The colour variant to use for the progress bar indicator
If not set, the progress bar will be rendered with a gray tone, which should only be used when the progress bar is empty`,name:"tint",required:!1,type:{name:"enum",value:[{value:'"green"'},{value:'"lime"'},{value:'"orange"'},{value:'"red"'}]}},getValueLabel:{defaultValue:null,description:`A function to get the text label to display in the progress bar.
If set, it will display a label on top of the progress bar`,name:"getValueLabel",required:!1,type:{name:"((value: number, max: number) => string)"}}}}}catch{}export{P};
